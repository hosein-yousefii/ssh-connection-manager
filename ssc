#!/bin/bash
#MAINTAINER: Hossein Yousefi <yousefi.hosein.o@gmail.com>


echo "############ Welcome to SSC ############"
echo
echo "For help: ssc help"

INPUT=$1
SSC_CONF=$HOME/.ssc.conf

Add-node () {

echo "# Please answer next questions: "
read -p "Hostname or IP address: " "SSC_Host"

while [[ -z ${SSC_Host} ]]
do
        read -p "Hostname or IP address: " "SSC_Host"
done

read -p "Username(default is root): " "SSC_Username"
read -p "Port number(default is 22): " "SSC_Port"
read -p "Options for ssh(default is null): " "SSC_Options"
read -p "Private key(default is null): " "SSC_Key"
read -p "Which group does it belong to(default is General): " "SSC_Group"
read -p "connection name(UNIQUE): " "SSC_Name"

while [[ ${#SSC_Name} == 0 ]] || [[ $(awk -F "," '{print $1}' ${SSC_CONF} |grep -w ${SSC_Name}) ]]
do
        read -p "## This name is already taken, choose another one: " "SSC_Name"
done &>/dev/null

SSC_Username=$(echo ${SSC_Username}|sed 's/ /-/')
SSC_Port=$(echo ${SSC_Port}|sed 's/ /-/')
SSC_Options=$(echo ${SSC_Options}|sed 's/ /-/')
SSC_Key=$(echo ${SSC_Key}|sed 's/ /-/')
SSC_Group=$(echo ${SSC_Group}|sed 's/ /-/')
SSC_Name=$(echo ${SSC_Name}|sed 's/ /-/')

if [[ -f ${SSC_CONF} ]]
then
        echo "${SSC_Name},${SSC_Host},${SSC_Username:-root},${SSC_Port:-22},${SSC_Options:-null},${SSC_Key:-null},${SSC_Group:-General}" >> ${SSC_CONF}
else
        echo "#MAINTAINER: Hossein Yousefi <yousefi.hosein.o@gmail.com>" > ${SSC_CONF}

        echo "#THIS IS SSC CONFIGURATION FILE AND SHOULD NOT BE EDITTED MANUALLY, IN CASE YOU DON'T KNOW ABOUT THE ARCHITECTURE." >> ${SSC_CONF}

        echo >> ${SSC_CONF}

        echo "## NAME, HOST, USERNAME, PORT, OPTIONS, PRIVATE_KEY, GROUP" >> ${SSC_CONF}

        echo >> ${SSC_CONF}

        echo >> ${SSC_CONF}

        echo "${SSC_Name},${SSC_Host},${SSC_Username:-root},${SSC_Port:-22},${SSC_Options:-null},${SSC_Key:-null},${SSC_Group:-General}" >> ${SSC_CONF}
fi

echo
echo "# Your node has been added successfuly."
}

List-node () {

SSC_ALL_GROUPS=$(cat ${SSC_CONF} |grep -v ^#|grep -v ^$| sed 's/,/ /g'| sort -k 7 |awk '{print $NF}'|uniq -d)

SSC_ALL_GROUPS="${SSC_ALL_GROUPS} $(cat ${SSC_CONF} |grep -v ^#|grep -v ^$| sed 's/,/ /g'| sort -k 7 |awk '{print $NF}'|uniq -u)"


for GROUP_NAME in $SSC_ALL_GROUPS
do
    echo
    printf "\e[0;31m%-5s\e[m \e[0;31m%-5s\e[m %-20s %-5s %-10s\n" "________________" ${GROUP_NAME}
    echo
    echo -e "\e[1;30m`printf "%-19s %-15s %-11s %-10s %-10s %-10s  %-13s\n\n" Name Host UserName Port Options SshKey` \e[0m"
    for SEPERATE_GROUP in $(grep -w $GROUP_NAME ${SSC_CONF})
    do

        SSC_Name=$(echo $SEPERATE_GROUP |awk -F "," '{print $1}')
        SSC_Host=$(echo $SEPERATE_GROUP |awk -F "," '{print $2}')
        SSC_Username=$(echo $SEPERATE_GROUP |awk -F "," '{print $3}')
        SSC_Port=$(echo $SEPERATE_GROUP |awk -F "," '{print $4}')
        SSC_Options=$(echo $SEPERATE_GROUP |awk -F "," '{print $5}')
        SSC_Key=$(echo $SEPERATE_GROUP |awk -F "," '{print $6}')

        printf "%-16s %-20s %-10s %-10s %-10s %-10s  %-13s\n" ${SSC_Name} ${SSC_Host} ${SSC_Username} ${SSC_Port} ${SSC_Options} ${SSC_Key}
    done
done

echo

}

Delete-node () {

read -p "Give the name of the node that you want to delete: " "SSC_Node_Name"

SSC_LINE_NUMBER=$(grep -n ^${SSC_Node_Name}, ${SSC_CONF} |awk -F ":" '{print $1}')

if [[ ! -z $SSC_LINE_NUMBER  ]]
then
        sed -i "${SSC_LINE_NUMBER} d" ${SSC_CONF}
        echo "# Your node has been deleted successfuly."
else
        echo
        echo "# Your node "${SSC_Node_Name}" doesn't exist."
fi

}

Copy-key () {

List-node

read -p "Which node do you like to copy your key? " "SSC_Node_Name"


SSC_LINE_NUMBER=$(grep -n ^${SSC_Node_Name}, ${SSC_CONF} |awk -F ":" '{print $1}')

if [[ ! -z $SSC_LINE_NUMBER  ]]
then
        SSC_Key=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $6}')
        if [[ $SSC_Key == null ]]
        then
                SSC_Key="${HOME}/.ssh/id_rsa"
                echo "# The key is ${SSC_Key}"
        else
                echo "# The key is ${SSC_Key}"
        fi

        SSC_Username=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $3}')
        SSC_Host=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $2}')
        SSC_Port=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $4}')

        echo
        ssh-copy-id -p ${SSC_Port} -i ${SSC_Key} ${SSC_Username}@${SSC_Host} && echo "# Your key has been added to '${SSC_Host}'"
else
        echo
        echo "# Your node "${SSC_Node_Name}" doesn't exist."
fi

}

Backup () {

read -p "Do you want to take a backup?(y/n) " "SSC_BACKUP"

if [[ ${SSC_BACKUP} == y ]]
then
        cp ${SSC_CONF} $(date '+%d-%m-%y-%H-%M')-ssc.conf && gzip $(date '+%d-%m-%y-%H-%M')-ssc.conf  && echo "Find your backup here: ${PWD}/$(date '+%d-%m-%y-%H-%M')-ssc.conf.gz"
fi
}

Restore () {

read -p "Do you want to restore your backup?(y/n) " "SSC_RESTORE"

if [[ ${SSC_RESTORE} == y ]]
then
        read -p "Please write the absolute path to your backup(.gz): " "SSC_RESTORE_PATH"
        gzip -d ${SSC_RESTORE_PATH} -c ${SSC_CONF} && echo "Backup is restored successfuly."
fi

}

Connect-node () {

List-node

read -p "Which node do you like to connect? " "SSC_Node_Name"

SSC_LINE_NUMBER=$(grep -n ^${SSC_Node_Name}, ${SSC_CONF} |awk -F ":" '{print $1}')

if [[ ! -z $SSC_LINE_NUMBER  ]]
then
        SSC_Key=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $6}')
        if [[ $SSC_Key == null ]]
        then
                SSC_Key="${HOME}/.ssh/id_rsa"
                echo "# The key is ${SSC_Key}"
        else
                echo "# The key is ${SSC_Key}"
        fi

        SSC_Username=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $3}')
        SSC_Host=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $2}')
        SSC_Port=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $4}')
        SSC_Options=$(grep -w ^${SSC_Node_Name} ${SSC_CONF} |awk -F "," '{print $5}')

        if [[ ${SSC_Options} == null ]]
        then
                SSC_Options=
        fi

        echo
        ssh -p ${SSC_Port} -i ${SSC_Key}  ${SSC_Username}@${SSC_Host} ${SSC_Options}
else
        echo
        echo "# Your node "${SSC_Node_Name}" doesn't exist."
fi

}

helps () {

echo """

This is a ssh connection manager tool.

OPTIONS:

-a                      To add a node

-l                      List nodes

-d                      Delete node

-k                      Copy key to node

-b                      Configuration's backup

-r                      Restore backup

-h, help        This page

-c                      Connect to a node from the list


SAMPLE:

ssm -a          TO add a new node

ssm -c          Select from list to connect

"""
}



case $INPUT in

        -a)
            Add-node
        ;;

        -l)
            List-node
        ;;

        -d)
            Delete-node
        ;;
        
        -k)
            Copy-key
        ;;

        -b)
            Backup
        ;;

        -r)
            Restore
        ;;

        -c)
            Connect-node
        ;;

        *|-h|help)
             helps
        ;;

esac
